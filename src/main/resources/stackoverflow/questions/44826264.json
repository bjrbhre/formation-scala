{
  "question_id" : 44826264,
  "title" : "No display when using JSch X11 forwarding",
  "body" : "<p>I'm trying to use JSch to automate a process where our users have to ssh into a particular workstation to run a GUI application (due to licensing issues). All workstations are running CentOS Linux. The process will involve a user clicking a button in a GUI application on their machine, enter their password, and the application will handle the ssh and opening the GUI application on the remote machine. I attempted my own implementation of X11 forwarding using the code; it will authenticate and connect but hang when I try and run any GUI application on the remote machine. I can run programs such as <code>uptime</code> and receive a textual response, which tells me that the ssh connection is working but X11 forwarding does not. When that didn't work, I copied and pasted the example code shown here:</p>\n\n<pre><code>/* -*-mode:java; c-basic-offset:2; indent-tabs-mode:nil -*- */\n/**\n* This program will demonstrate X11 forwarding.\n*   $ CLASSPATH=.:../build javac X11Forwarding.java \n*   $ CLASSPATH=.:../build java X11Forwarding\n* You will be asked username, hostname, displayname and passwd. \n* If your X server does not run at 127.0.0.1, please enter correct\n* displayname. If everything works fine, you will get the shell prompt.\n* Try X applications; for example, xlogo.\n*\n*/\nimport com.jcraft.jsch.*;\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class X11Forwarding{\npublic static void main(String[] arg){\n\nString xhost=\"127.0.0.1\";\nint xport=0;\n\ntry{\n  JSch jsch=new JSch();  \n\n  String host=null;\n  if(arg.length&gt;0){\n    host=arg[0];\n  }\n  else{\n    host=JOptionPane.showInputDialog(\"Enter username@hostname\",\n                                     System.getProperty(\"user.name\")+\n                                     \"@localhost\"); \n  }\n  String user=host.substring(0, host.indexOf('@'));\n  host=host.substring(host.indexOf('@')+1);\n\n  Session session=jsch.getSession(user, host, 22);\n\n  String display=JOptionPane.showInputDialog(\"Please enter display name\", \n                     xhost+\":\"+xport);\n  xhost=display.substring(0, display.indexOf(':'));\n  xport=Integer.parseInt(display.substring(display.indexOf(':')+1));\n\n  session.setX11Host(xhost);\n  session.setX11Port(xport+6000);\n\n  // username and password will be given via UserInfo interface.\n  UserInfo ui=new MyUserInfo();\n  session.setUserInfo(ui);\n  session.connect();\n\n  Channel channel=session.openChannel(\"shell\");\n\n  channel.setXForwarding(true);\n\n  channel.setInputStream(System.in);\n  channel.setOutputStream(System.out);\n\n  channel.connect();\n}\ncatch(Exception e){\n  System.out.println(e);\n}\n}\n\npublic static class MyUserInfo implements UserInfo, UIKeyboardInteractive{\npublic String getPassword(){ return passwd; }\npublic boolean promptYesNo(String str){\n  Object[] options={ \"yes\", \"no\" };\n  int foo=JOptionPane.showOptionDialog(null, \n         str,\n         \"Warning\", \n         JOptionPane.DEFAULT_OPTION, \n         JOptionPane.WARNING_MESSAGE,\n         null, options, options[0]);\n   return foo==0;\n}\n\nString passwd;\nJTextField passwordField=(JTextField)new JPasswordField(20);\n\npublic String getPassphrase(){ return null; }\npublic boolean promptPassphrase(String message){ return true; }\npublic boolean promptPassword(String message){\n  Object[] ob={passwordField}; \n  int result=\n  JOptionPane.showConfirmDialog(null, ob, message,\n                JOptionPane.OK_CANCEL_OPTION);\n  if(result==JOptionPane.OK_OPTION){\npasswd=passwordField.getText();\nreturn true;\n  }\n  else{ return false; }\n}\npublic void showMessage(String message){\n  JOptionPane.showMessageDialog(null, message);\n}\nfinal GridBagConstraints gbc = \n  new GridBagConstraints(0,0,1,1,1,1,\n                         GridBagConstraints.NORTHWEST,\n                         GridBagConstraints.NONE,\n                         new Insets(0,0,0,0),0,0);\nprivate Container panel;\npublic String[] promptKeyboardInteractive(String destination,\n                                          String name,\n                                          String instruction,\n                                          String[] prompt,\n                                          boolean[] echo){\n  panel = new JPanel();\n  panel.setLayout(new GridBagLayout());\n\n  gbc.weightx = 1.0;\n  gbc.gridwidth = GridBagConstraints.REMAINDER;\n  gbc.gridx = 0;\n  panel.add(new JLabel(instruction), gbc);\n  gbc.gridy++;\n\n  gbc.gridwidth = GridBagConstraints.RELATIVE;\n\n  JTextField[] texts=new JTextField[prompt.length];\n  for(int i=0; i&lt;prompt.length; i++){\n    gbc.fill = GridBagConstraints.NONE;\n    gbc.gridx = 0;\n    gbc.weightx = 1;\n    panel.add(new JLabel(prompt[i]),gbc);\n\n    gbc.gridx = 1;\n    gbc.fill = GridBagConstraints.HORIZONTAL;\n    gbc.weighty = 1;\n    if(echo[i]){\n      texts[i]=new JTextField(20);\n    }\n    else{\n      texts[i]=new JPasswordField(20);\n    }\n    panel.add(texts[i], gbc);\n    gbc.gridy++;\n  }\n\n  if(JOptionPane.showConfirmDialog(null, panel, \n                                   destination+\": \"+name,\n                                   JOptionPane.OK_CANCEL_OPTION,\n                                   JOptionPane.QUESTION_MESSAGE)\n     ==JOptionPane.OK_OPTION){\n    String[] response=new String[prompt.length];\n    for(int i=0; i&lt;prompt.length; i++){\n      response[i]=texts[i].getText();\n    }\nreturn response;\n  }\n  else{\n    return null;  // cancel\n  }\n}\n}\n}\n</code></pre>\n\n<p>Again, I can connect to the remote workstation successfully through my GUI application and run textual programs such as <code>uptime</code> but no GUI applications on the remote workstation.</p>\n\n<p>I can <code>ssh -X</code> into the remote workstation from a terminal window and everything works just fine.</p>\n\n<p>If I run <code>env</code> on the user workstation, I see <code>DISPLAY=:0.0</code></p>\n\n<p>If I run <code>env</code> on the remote workstation while using <code>ssh -X</code>, I see <code>DISPLAY=localhost:11.0</code></p>\n\n<p>When I open the Java GUI application on the local workstation, it runs <code>System.out.println(System.getenv(\"DISPLAY\"));</code> and it returns <code>:0</code></p>\n\n<p>When I connect to the remote system through the Java GUI application and send <code>env</code> I see <code>DISPLAY=localhost:11.0</code></p>\n\n<p>I am currently setting <code>user</code> to the current <code>user.name</code> env variable and <code>host</code> to the particular workstation with the software. <code>xhost</code> is set to 127.0.0.1 and <code>xport</code> is set to 0 (which translates to 6000 through the code). I have tried changing out the address for \"localhost\" with no success. I have also tried hard-coding <code>xport</code> to 0, 6000, 6001, and 6011 with no success.</p>\n\n<p>I am using the Eclipse IDE but have tried both running it from the IDE and exporting a .jar and running it that way with no luck.</p>\n",
  "link" : "https://stackoverflow.com/questions/44826264/no-display-when-using-jsch-x11-forwarding",
  "owner" : {
    "user_id" : 8216976,
    "user_type" : "registered",
    "display_name" : "Rob J.",
    "profile_image" : "https://www.gravatar.com/avatar/f6705ba76f0c83b4ba60ac24f25366a6?s=128&d=identicon&r=PG&f=1",
    "link" : "https://stackoverflow.com/users/8216976/rob-j",
    "reputation" : 1,
    "accept_rate" : null
  },
  "is_answered" : false,
  "creation_date" : 1498742286,
  "last_activity_date" : 1498742286,
  "tags" : [
    "java",
    "eclipse",
    "ssh",
    "x11",
    "jsch"
  ],
  "score" : 0,
  "view_count" : 5,
  "answer_count" : 0
}