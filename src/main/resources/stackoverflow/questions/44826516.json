{
  "question_id" : 44826516,
  "title" : "C# Generic method fails but non generic works with Equals. Exception: Unable to create a constant value of type &#39;System.Object&#39;",
  "body" : "<p>TL;DR: </p>\n\n<pre><code>//Works\npublic async Task&lt;Article&gt; GetAsync(int id)\n{\n    return (await GetAsync(entity =&gt; entity.Id.Equals(id))).SingleOrDefault();\n}\n\n//TId : struct\n//Exception \"Unable to create a constant value of type 'System.Object'. Only primitive types or enumeration types are supported in this context.\"\npublic async Task&lt;TEntity&gt; GetAsync(TId id)\n{\n    return (await GetAsync(entity =&gt; entity.Id.Equals(id))).SingleOrDefault();\n}\n</code></pre>\n\n<p>Original:</p>\n\n<p>When using a generic method I get an exception but the same method works with non generic implementation. Why is this? Generic repository:</p>\n\n<pre><code>public class EntityRepository&lt;TEntity, TId, TContext&gt; : IEntityRepository&lt;TEntity, TId&gt;\n    where TEntity : class, IEntity&lt;TId&gt;\n    where TId : struct\n    where TContext : BaseIdentityDbContext\n{\n    protected TContext Context { get; }\n    protected IDbSet&lt;TEntity&gt; Set { get; }\n\n    /// &lt;summary&gt;\n    /// Use to always filter entities based on a predicate\n    /// &lt;/summary&gt;\n    protected virtual Expression&lt;Func&lt;TEntity, bool&gt;&gt; Predicate =&gt; entity =&gt; true;\n\n\n    protected EntityRepository(TContext context, IDbSet&lt;TEntity&gt; set)\n    {\n        Context = context;\n        Set = set;\n    }\n\n    /// &lt;summary&gt;\n    /// Returns the entity that corresponds to the given id\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;The found entity, or null&lt;/returns&gt;\n    public virtual async Task&lt;TEntity&gt; GetAsync(TId id)\n    {\n        return (await GetAsync(entity =&gt; entity.Id.Equals(id))).SingleOrDefault();\n    }\n\n    /// &lt;summary&gt;\n    /// Returns the entities that corresponds to the given predicate\n    /// &lt;/summary&gt;\n    public virtual async Task&lt;IReadOnlyCollection&lt;TEntity&gt;&gt; GetAsync(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate)\n    {\n        return await Set\n            .Where(Predicate)\n            .Where(predicate)\n            .ToListAsync();\n    }\n}\n</code></pre>\n\n<p>By hiding/override the original method I can get it to work:</p>\n\n<pre><code>public class ArticleRepository : EntityRepository&lt;Article, int, MyDbContext &gt;, IArticleRepository\n{\n    public ArticleRepository(MyDbContext context) : base(context, context.Articles)\n    {\n    }\n\n    public async new Task&lt;Article&gt; GetAsync(int id)\n    {\n        return (await GetAsync(entity =&gt; entity.Id.Equals(id))).SingleOrDefault();\n    }\n}\n</code></pre>\n\n<p>I have also tried EqualityComparer but it does not work, same error for non generic implementation.</p>\n\n<pre><code>//Exception: Unable to create a constant value of type 'System.Collections.Generic.EqualityComparer`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'. Only primitive types or enumeration types are supported in this context.\npublic async Task&lt;TEntity&gt; GetAsync(TId id)\n{\n    return (await GetAsync(entity =&gt; EqualityComparer&lt;TId&gt;.Default.Equals(entity.Id, id))).SingleOrDefault();\n}\n</code></pre>\n",
  "link" : "https://stackoverflow.com/questions/44826516/c-generic-method-fails-but-non-generic-works-with-equals-exception-unable-to",
  "owner" : {
    "user_id" : 3850405,
    "user_type" : "registered",
    "display_name" : "Ogglas",
    "profile_image" : "https://www.gravatar.com/avatar/b2b9eece8c493ba7ddcff82f845ff2af?s=128&d=identicon&r=PG&f=1",
    "link" : "https://stackoverflow.com/users/3850405/ogglas",
    "reputation" : 4352,
    "accept_rate" : 75
  },
  "is_answered" : false,
  "creation_date" : 1498742937,
  "last_activity_date" : 1498742937,
  "tags" : [
    "c#",
    "generics"
  ],
  "score" : 0,
  "view_count" : 16,
  "answer_count" : 0
}