{
  "question_id" : 44825712,
  "title" : "Send mail via EWS: Schema validation: invalid child element &#39;Body&#39;",
  "body" : "<p>I'm trying to send an e-mail from within a C++ application via a Microsoft Exchange 2010 server. For this, I use the EWS protocol using the library <a href=\"https://github.com/otris/ews-cpp\" rel=\"nofollow noreferrer\">ews-cpp</a>.</p>\n\n<p>The following trivial example, based on the one from <a href=\"https://github.com/otris/ews-cpp/blob/master/examples/send_message.cpp\" rel=\"nofollow noreferrer\">https://github.com/otris/ews-cpp/blob/master/examples/send_message.cpp</a>, is failing (mail addresses and credentials stripped from my actual code):</p>\n\n<pre><code>#include &lt;iostream&gt;\n#include &lt;ews/ews.hpp&gt;\n\nstruct {\n    std::string domain = \"mailserver\";\n    std::string username = \"...\";\n    std::string password = \"...\";\n    std::string server_uri = \"https://mailserver/EWS/Exchange.asmx\";\n} env;\n\nint main()\n{\n    ews::set_up();\n\n    try\n    {\n        auto service = ews::service(env.server_uri, env.domain, env.username,\n                                    env.password);\n        service.set_request_server_version(ews::server_version::exchange_2010_sp2);\n\n        auto message = ews::message();\n\n        message.set_subject(\"Test mail from outer space\");\n        std::vector&lt;ews::mailbox&gt; recipients;\n\n        recipients.push_back(ews::mailbox(\"...\"));\n        message.set_to_recipients(recipients);\n\n        auto text = ews::body(\"This is a test.\");\n        message.set_body(text);\n\n        service.create_item(message,\n                            ews::message_disposition::send_and_save_copy);\n    }\n    catch (ews::schema_validation_error&amp; exc)\n    {\n        std::cout &lt;&lt; exc.what() &lt;&lt; std::endl;\n        std::cout &lt;&lt; exc.violation() &lt;&lt; std::endl;\n    }\n\n    ews::tear_down();\n    return 0;\n}\n</code></pre>\n\n<p>The raw SOAP request is as follows (indentation added by me):</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;m:CreateItem MessageDisposition=\"SendAndSaveCopy\"&gt;\n  &lt;m:Items&gt;\n    &lt;t:Message&gt;\n      &lt;t:Subject&gt;Test mail from outer space&lt;/t:Subject&gt;\n      &lt;t:ToRecipients&gt;\n        &lt;t:Mailbox&gt;\n          &lt;t:EmailAddress&gt;...&lt;/t:EmailAddress&gt;\n        &lt;/t:Mailbox&gt;\n      &lt;/t:ToRecipients&gt;\n      &lt;t:Body BodyType=\"Text\"&gt;This is a test.&lt;/t:Body&gt;\n    &lt;/t:Message&gt;\n  &lt;/m:Items&gt;\n&lt;/m:CreateItem&gt;\n</code></pre>\n\n<p>The function <code>create_item</code> throws an <code>ews::schema_validation_error</code> which is caught in the above code, printing:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>The request failed schema validation\nThe element 'Message' in namespace ‘http://schemas.microsoft.com/exchange/services/2006/types’ has invalid child element 'Body' in namespace 'http://schemas.microsoft.com/exchange/services/2006/types'. List of possible elements expected: 'CcRecipients, BccRecipients, IsReadReceiptRequested, IsDeliveryReceiptRequested, ConversationIndex, ConversationTopic, From, InternetMessageId, IsRead, IsResponseRequested, References, ReplyTo, ReceivedBy, ReceivedRepresenting' in Namespace 'http://schemas.microsoft.com/exchange/services/2006/types'.\n</code></pre>\n\n<p>In other words, EWS doesn't expect <code>&lt;t:Body&gt;</code> within <code>&lt;t:Message&gt;</code>.</p>\n\n<p>So, when leaving out that element in the SOAP request (comment out <code>message.set_body(text)</code>), the mail is sent smoothly. However, a mail without a body doesn't make much sense, does it?</p>\n\n<p>I thought that the problem might be the fact that <code>ews-cpp</code> was written for Exchange 2013 (and that the schema changed between 2010 and 2013 in this regard). So I digged into the schema, which each Exchange server serves at <code>/ews/types.xsd</code>, to see if the schema allows such a child element.</p>\n\n<p>In the schema definition file, I found the definition of the type <code>MessageType</code> (which is the type of the <code>Message</code> element we are talking about):</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;xs:complexType name=\"MessageType\"&gt;\n  &lt;xs:complexContent&gt;\n    &lt;xs:extension base=\"t:ItemType\"&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=\"Sender\" minOccurs=\"0\" type=\"t:SingleRecipientType\"/&gt;\n        &lt;xs:element name=\"ToRecipients\" type=\"t:ArrayOfRecipientsType\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"CcRecipients\" type=\"t:ArrayOfRecipientsType\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"BccRecipients\" type=\"t:ArrayOfRecipientsType\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"IsReadReceiptRequested\" type=\"xs:boolean\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"IsDeliveryReceiptRequested\" type=\"xs:boolean\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"ConversationIndex\" type=\"xs:base64Binary\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"ConversationTopic\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"From\" type=\"t:SingleRecipientType\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"InternetMessageId\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"IsRead\" type=\"xs:boolean\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"IsResponseRequested\" type=\"xs:boolean\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"References\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"ReplyTo\" type=\"t:ArrayOfRecipientsType\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"ReceivedBy\" type=\"t:SingleRecipientType\" minOccurs=\"0\"/&gt;\n        &lt;xs:element name=\"ReceivedRepresenting\" type=\"t:SingleRecipientType\" minOccurs=\"0\"/&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:extension&gt;\n  &lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n</code></pre>\n\n<p>As you can see, there is no <code>Body</code> child element, but <code>MessageType</code> is based on <code>ItemType</code>, which is defined as follows (excerpt):</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;xs:complexType name=\"ItemType\"&gt;\n&lt;xs:sequence&gt;\n    &lt;xs:element name=\"MimeContent\" type=\"t:MimeContentType\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"ItemId\" type=\"t:ItemIdType\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"ParentFolderId\" type=\"t:FolderIdType\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"ItemClass\" type=\"t:ItemClassType\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"Subject\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"Sensitivity\" type=\"t:SensitivityChoicesType\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"Body\" type=\"t:BodyType\" minOccurs=\"0\"/&gt;\n    &lt;xs:element name=\"Attachments\" type=\"t:NonEmptyArrayOfAttachmentsType\" minOccurs=\"0\"/&gt;\n    [...]\n  &lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n</code></pre>\n\n<p>As you can see, it accepts the <code>Body</code> element as a child.</p>\n\n<p>Note that the <code>Subject</code> element is also defined in the <code>ItemType</code> and not in <code>MessageType</code>, and that is accepted by EWS in the above code snippet.</p>\n\n<p>What might be the cause of this strange validation failure?</p>\n",
  "link" : "https://stackoverflow.com/questions/44825712/send-mail-via-ews-schema-validation-invalid-child-element-body",
  "owner" : {
    "user_id" : 592323,
    "user_type" : "registered",
    "display_name" : "leemes",
    "profile_image" : "https://www.gravatar.com/avatar/5df027e3c31ae3b8755c0ea377f951a0?s=128&d=identicon&r=PG",
    "link" : "https://stackoverflow.com/users/592323/leemes",
    "reputation" : 29032,
    "accept_rate" : 70
  },
  "is_answered" : false,
  "creation_date" : 1498740817,
  "last_activity_date" : 1498743663,
  "tags" : [
    "c++",
    "email",
    "soap",
    "exchange-server",
    "exchangewebservices"
  ],
  "score" : 0,
  "view_count" : 9,
  "answer_count" : 1
}