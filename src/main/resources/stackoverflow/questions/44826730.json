{
  "question_id" : 44826730,
  "title" : "How to validate Sequelize transaction and make it look nice",
  "body" : "<p>I am trying to re-learn NodeJS after a couple years of putting it down, so I'm building a small banking website as a test. I decided to use Sequelize for my ORM, but I'm having a bit of trouble sending money between people in a way that I like.\nHere was my first attempt:</p>\n\n<pre><code>// myUsername - who to take the money from\n// sendUsername - who to send the money to\n// money - amount of money to be sent from `myUsername`-&gt;`sendUsername`\n// Transaction is created to keep a log of banking transactions for record-keeping.\nmodule.exports = (myUsername, sendUsername, money, done) =&gt; {\n    // Create transaction so that errors will roll back\n    connection.transaction(t =&gt; {\n        return Promise.all([\n            User.increment('balance', {\n                by: money,\n                where: { username: myUsername },\n                transaction: t\n            }),\n            User.increment('balance', {\n                by: -money,\n                where: { username: sendUsername },\n                transaction: t\n            }),\n            Transaction.create({\n                fromUser: myUsername,\n                toUser: sendUsername,\n                value: money\n            }, { transaction: t })\n        ]);\n    }).then(result =&gt; {\n        return done(null);\n    }).catch(err =&gt; {\n        return done(err);\n    });\n};\n</code></pre>\n\n<p>This worked, but it didn't validate the model when it was incremented. I'd like for the transaction to fail when the model does not validate. My next attempt was to go to callbacks, shown here (same function header):</p>\n\n<pre><code>connection.transaction(t =&gt; {\n        // Find the user to take money from\n        return User\n        .findOne({ where: { username: myUsername } }, { transaction: t })             .then(myUser =&gt; {\n                    // Decrement money\n                    return myUser\n                    .decrement('balance', { by: money, transaction: t })\n                    .then(myUser =&gt; {\n                            // Reload model to validate data\n                            return myUser.reload(myUser =&gt; {\n                                    // Validate modified model\n                                    return myUser.validate(() =&gt; {\n                                            // Find user to give money to\n                                            return User\n                                            .findOne({ where: { username: sendUsername } }, { transaction: t })\n                                            .then(sendUser =&gt; {\n                                                    // Increment balance\n                                                    return sendUser\n                                                    .increment('balance', { by: money, transaction: t })\n                                                    .then(sendUser =&gt; {\n                                                            // Reload model\n                                                            return sendUser.reload(sendUser =&gt; {\n                                                                    // Validate model\n                                                                    return sendUser.validate(() =&gt; {\n                                                                            // Create a transaction for record-keeping\n                                                                            return Transaction\n                                                                            .create({\n                                                                                    fromUser: myUser.id,\n                                                                                    toUser: sendUser.id,\n                                                                                    value: money\n                                                                            }, { transaction: t });\n                                                                    });\n                                                            });\n                                                    });\n                                            });\n                                    });\n                            });\n                    });\n            });\n    }).then(result =&gt; {\n            return done(null);\n    }).catch(err =&gt; {\n            return done(err);\n    });\n</code></pre>\n\n<p>This works, in that money is still transfered beetween people, but it still doesn't validate the models. I think the reason is that the <code>.validate()</code> and the <code>.reload()</code> methods do not have the ability to add the <code>transaction: t</code> parameter on it.\nMy question is if there's a way to do validation in a transaction, but I'd also like some help fixing this \"callback hell.\" Again, I haven't done JS in a while, so there are probably better ways of doing this now that I'm just now aware of.</p>\n\n<p>Thanks!</p>\n",
  "link" : "https://stackoverflow.com/questions/44826730/how-to-validate-sequelize-transaction-and-make-it-look-nice",
  "owner" : {
    "user_id" : 2958754,
    "user_type" : "registered",
    "display_name" : "T94j0",
    "profile_image" : "https://www.gravatar.com/avatar/f48f39d5226402f7d662f4c7455763ce?s=128&d=identicon&r=PG&f=1",
    "link" : "https://stackoverflow.com/users/2958754/t94j0",
    "reputation" : 40,
    "accept_rate" : 80
  },
  "is_answered" : false,
  "creation_date" : 1498743449,
  "last_activity_date" : 1498743449,
  "tags" : [
    "javascript",
    "node.js",
    "validation",
    "transactions",
    "sequelize.js"
  ],
  "score" : 0,
  "view_count" : 2,
  "answer_count" : 0
}