{
  "question_id" : 44825783,
  "title" : "How to: Host Controls in Windows Forms DataGridView Cells in vb.net",
  "body" : "<p>This is the code i have tried from MSDN website its not working please help me !!</p>\n\n<p>Imports System\nImports System.Windows.Forms</p>\n\n<p>Public Class CalendarColumn\n    Inherits DataGridViewColumn</p>\n\n<pre><code>Public Sub New()\n    MyBase.New(New CalendarCell())\nEnd Sub\n\nPublic Overrides Property CellTemplate() As DataGridViewCell\n    Get\n        Return MyBase.CellTemplate\n    End Get\n    Set(ByVal value As DataGridViewCell)\n\n        ' Ensure that the cell used for the template is a CalendarCell.\n        If (value IsNot Nothing) AndAlso _\n            Not value.GetType().IsAssignableFrom(GetType(CalendarCell)) _\n            Then\n            Throw New InvalidCastException(\"Must be a CalendarCell\")\n        End If\n        MyBase.CellTemplate = value\n\n    End Set\nEnd Property\n</code></pre>\n\n<p>End Class</p>\n\n<p>Public Class CalendarCell\n    Inherits DataGridViewTextBoxCell</p>\n\n<pre><code>Public Sub New()\n    ' Use the short date format.\n    Me.Style.Format = \"d\"\nEnd Sub\n\nPublic Overrides Sub InitializeEditingControl(ByVal rowIndex As Integer, _\n    ByVal initialFormattedValue As Object, _\n    ByVal dataGridViewCellStyle As DataGridViewCellStyle)\n\n    ' Set the value of the editing control to the current cell value.\n    MyBase.InitializeEditingControl(rowIndex, initialFormattedValue, _\n        dataGridViewCellStyle)\n\n    Dim ctl As CalendarEditingControl = _\n        CType(DataGridView.EditingControl, CalendarEditingControl)\n    ctl.Value = CType(Me.Value, DateTime)\n\nEnd Sub\n\nPublic Overrides ReadOnly Property EditType() As Type\n    Get\n        ' Return the type of the editing contol that CalendarCell uses.\n        Return GetType(CalendarEditingControl)\n    End Get\nEnd Property\n\nPublic Overrides ReadOnly Property ValueType() As Type\n    Get\n        ' Return the type of the value that CalendarCell contains.\n        Return GetType(DateTime)\n    End Get\nEnd Property\n\nPublic Overrides ReadOnly Property DefaultNewRowValue() As Object\n    Get\n        ' Use the current date and time as the default value.\n        Return DateTime.Now\n    End Get\nEnd Property\n</code></pre>\n\n<p>End Class</p>\n\n<p>Class CalendarEditingControl\n    Inherits DateTimePicker\n    Implements IDataGridViewEditingControl</p>\n\n<pre><code>Private dataGridViewControl As DataGridView\nPrivate valueIsChanged As Boolean = False\nPrivate rowIndexNum As Integer\n\nPublic Sub New()\n    Me.Format = DateTimePickerFormat.Short\nEnd Sub\n\nPublic Property EditingControlFormattedValue() As Object _\n    Implements IDataGridViewEditingControl.EditingControlFormattedValue\n\n    Get\n        Return Me.Value.ToShortDateString()\n    End Get\n\n    Set(ByVal value As Object)\n        If TypeOf value Is String Then\n            Me.Value = DateTime.Parse(CStr(value))\n        End If\n    End Set\n\nEnd Property\n\nPublic Function GetEditingControlFormattedValue(ByVal context _\n    As DataGridViewDataErrorContexts) As Object _\n    Implements IDataGridViewEditingControl.GetEditingControlFormattedValue\n\n    Return Me.Value.ToShortDateString()\n\nEnd Function\n\nPublic Sub ApplyCellStyleToEditingControl(ByVal dataGridViewCellStyle As _\n    DataGridViewCellStyle) _\n    Implements IDataGridViewEditingControl.ApplyCellStyleToEditingControl\n\n    Me.Font = dataGridViewCellStyle.Font\n    Me.CalendarForeColor = dataGridViewCellStyle.ForeColor\n    Me.CalendarMonthBackground = dataGridViewCellStyle.BackColor\n\nEnd Sub\n\nPublic Property EditingControlRowIndex() As Integer _\n    Implements IDataGridViewEditingControl.EditingControlRowIndex\n\n    Get\n        Return rowIndexNum\n    End Get\n    Set(ByVal value As Integer)\n        rowIndexNum = value\n    End Set\n\nEnd Property\n\nPublic Function EditingControlWantsInputKey(ByVal key As Keys, _\n    ByVal dataGridViewWantsInputKey As Boolean) As Boolean _\n    Implements IDataGridViewEditingControl.EditingControlWantsInputKey\n\n    ' Let the DateTimePicker handle the keys listed.\n    Select Case key And Keys.KeyCode\n        Case Keys.Left, Keys.Up, Keys.Down, Keys.Right, _\n            Keys.Home, Keys.End, Keys.PageDown, Keys.PageUp\n\n            Return True\n\n        Case Else\n            Return False\n    End Select\n\nEnd Function\n\nPublic Sub PrepareEditingControlForEdit(ByVal selectAll As Boolean) _\n    Implements IDataGridViewEditingControl.PrepareEditingControlForEdit\n\n    ' No preparation needs to be done.\n\nEnd Sub\n\nPublic ReadOnly Property RepositionEditingControlOnValueChange() _\n    As Boolean Implements _\n    IDataGridViewEditingControl.RepositionEditingControlOnValueChange\n\n    Get\n        Return False\n    End Get\n\nEnd Property\n\nPublic Property EditingControlDataGridView() As DataGridView _\n    Implements IDataGridViewEditingControl.EditingControlDataGridView\n\n    Get\n        Return dataGridViewControl\n    End Get\n    Set(ByVal value As DataGridView)\n        dataGridViewControl = value\n    End Set\n\nEnd Property\n\nPublic Property EditingControlValueChanged() As Boolean _\n    Implements IDataGridViewEditingControl.EditingControlValueChanged\n\n    Get\n        Return valueIsChanged\n    End Get\n    Set(ByVal value As Boolean)\n        valueIsChanged = value\n    End Set\n\nEnd Property\n\nPublic ReadOnly Property EditingControlCursor() As Cursor _\n    Implements IDataGridViewEditingControl.EditingPanelCursor\n\n    Get\n        Return MyBase.Cursor\n    End Get\n\nEnd Property\n\nProtected Overrides Sub OnValueChanged(ByVal eventargs As EventArgs)\n\n    ' Notify the DataGridView that the contents of the cell have changed.\n    valueIsChanged = True\n    Me.EditingControlDataGridView.NotifyCurrentCellDirty(True)\n    MyBase.OnValueChanged(eventargs)\n\nEnd Sub\n</code></pre>\n\n<p>End Class</p>\n\n<p>Public Class Form1\n    Inherits Form</p>\n\n<pre><code>Private dataGridView1 As New DataGridView()\n\n&lt;STAThreadAttribute()&gt; _\nPublic Shared Sub Main()\n    Application.Run(New Form1())\nEnd Sub\n\nPublic Sub New()\n    Me.dataGridView1.Dock = DockStyle.Fill\n    Me.Controls.Add(Me.dataGridView1)\n    Me.Text = \"DataGridView calendar column demo\"\nEnd Sub\n\nPrivate Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _\n    Handles Me.Load\n\n    Dim col As New CalendarColumn()\n    Me.dataGridView1.Columns.Add(col)\n    Me.dataGridView1.RowCount = 5\n    Dim row As DataGridViewRow\n    For Each row In Me.dataGridView1.Rows\n        row.Cells(0).Value = DateTime.Now\n    Next row\n\nEnd Sub\n</code></pre>\n\n<p>End Class</p>\n",
  "link" : "https://stackoverflow.com/questions/44825783/how-to-host-controls-in-windows-forms-datagridview-cells-in-vb-net",
  "owner" : {
    "user_id" : 8231806,
    "user_type" : "registered",
    "display_name" : "Vinoth Kumar N",
    "profile_image" : "https://lh4.googleusercontent.com/-Pn5HpFMPMxY/AAAAAAAAAAI/AAAAAAAAACo/04_PJ1j87UQ/photo.jpg?sz=128",
    "link" : "https://stackoverflow.com/users/8231806/vinoth-kumar-n",
    "reputation" : 1,
    "accept_rate" : null
  },
  "is_answered" : false,
  "creation_date" : 1498741022,
  "last_activity_date" : 1498741022,
  "tags" : [
    "vb.net"
  ],
  "score" : -2,
  "view_count" : 4,
  "answer_count" : 0
}