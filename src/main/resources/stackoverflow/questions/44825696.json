{
  "question_id" : 44825696,
  "title" : "Use two differently configured ObjectMappers in one Spring Boot application",
  "body" : "<p>I am working on a middleware-app which deserializes values received via RestTemplate as json-String from a legacy-API (so, no influence on \"their\" data model and thus needing some custom config for my objectmapper consuming this api), and the app itself serves a restful API with (partially enriched and composited) data based on the legacydata as json, too.</p>\n\n<p>Now, my legacy-Mapping-Classes' Constructors are all sharing a common structure like this at the moment:</p>\n\n<pre><code>    ...\n    private ObjectMapper mapper;\n\n    public MyMapper() {\n        this.mapper = new ObjectMapper();\n        this.mapper.configure(DeserializationFeature.UNWRAP_ROOT_VALUE, true);\n        this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n    ...\n</code></pre>\n\n<p>because I use Jackson to de-serialize the json from the legacysystem. Basically I want to refactor this redundance using Springs DI Container. </p>\n\n<p>So I tried to create my own Objectmapper <code>@Component</code> which just extends <code>ObjectMapper</code> like it is stated in some answers in this thread:\n<a href=\"https://stackoverflow.com/questions/7854030/configuring-objectmapper-in-spring\">Configuring ObjectMapper in Spring</a> - lets call it <code>FromLegacyObjectMapper</code> - instead of initializing my mapper in every class, so I created one and used</p>\n\n<pre><code>@Autowired\nprivate FromLegacyObjectMapper\n</code></pre>\n\n<p>(or the constructorinjection-equivalent, but for simplicitys sake..). \nBut this had some serious sideeffects. Actually, I wasn't able to deserialize clientjson to viewmodels in my controllers anymore because of the rootvalue-wrapping, because the autowiring overwrites the spring boot standard objectmapper which I actually need when deserializing viewModels from my frontend.</p>\n\n<p>I try to get it up and running like this:</p>\n\n<pre><code>frontend &lt;---&gt; My Api using Standard ObjectMapper &lt;--&gt; viewModel created by consuming legacy-Api-json using FromLegacyObjectMapper\n</code></pre>\n\n<p>So, what I surely could do is using a baseclass for my mappingclasses and just add the code above to the base constructor, and let every Mapperclass extend this base, but actually I hoped to find a way to use springs dependency injection container instead. I am out of ideas for now, so I hope anyone could help me out!</p>\n",
  "link" : "https://stackoverflow.com/questions/44825696/use-two-differently-configured-objectmappers-in-one-spring-boot-application",
  "owner" : {
    "user_id" : 1341599,
    "user_type" : "registered",
    "display_name" : "Dominik",
    "profile_image" : "https://www.gravatar.com/avatar/ae9e53f9356ab54eb8063ebeda5564bb?s=128&d=identicon&r=PG",
    "link" : "https://stackoverflow.com/users/1341599/dominik",
    "reputation" : 1295,
    "accept_rate" : 97
  },
  "is_answered" : false,
  "creation_date" : 1498740768,
  "last_activity_date" : 1498741099,
  "tags" : [
    "json",
    "spring",
    "spring-boot",
    "jackson",
    "mapping"
  ],
  "score" : 0,
  "view_count" : 14,
  "answer_count" : 1
}