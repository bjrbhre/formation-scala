{
  "question_id" : 44806067,
  "title" : "Spring Batch Integration Remote Chunking error - Message contained wrong job instance id [25] should have been [24]",
  "body" : "<p>I'm running into <a href=\"https://jira.spring.io/browse/BATCH-2507\" rel=\"nofollow noreferrer\">this</a> bug (more info <a href=\"https://stackoverflow.com/questions/37332048/spring-batch-how-to-configure-remote-chunking-for-multiple-jobs-running-in-a-t\">here</a>) which appears to mean that for multi-threaded batches using remote chunking you can't use a common response channel.  I'm not exactly sure how to proceed to get this working.  Surely there's a way to get this working, because without it I can't see much benefit to remote chunking.</p>\n\n<p>Here's my DSL config that creates a JobRequest:</p>\n\n<pre><code>@Bean\nIntegrationFlow newPollingJobsAdapter(JobLaunchingGateway jobLaunchingGateway) {\n    // Start by polling the DB for new PollingJobs according to the polling rate\n    return IntegrationFlows.from(jdbcPollingChannelAdapter(),\n            c -&gt; c.poller(Pollers.fixedRate(10000)\n                    // Do the polling on one of 10 threads.\n                    .taskExecutor(Executors.newFixedThreadPool(10))\n                    // pull out up to 100 new ids for each poll.\n                    .maxMessagesPerPoll(100)))\n            .log(LoggingHandler.Level.WARN)\n            // The polling adapter above returns a list of ids.  Split them out into\n            // individual ids\n            .split()\n            // Now push each one onto a separate thread for batch processing.\n            .channel(MessageChannels.executor(Executors.newFixedThreadPool(10)))\n            .log(LoggingHandler.Level.WARN)\n            // Transform each one into a JobLaunchRequest\n            .&lt;Long, JobLaunchRequest&gt;transform(id -&gt; {\n                logger.warn(\"Creating job for ID {}\", id);\n                JobParametersBuilder builder = new JobParametersBuilder()\n                        .addLong(\"polling-job-id\", id, true);\n                return new JobLaunchRequest(job, builder.toJobParameters());\n            })\n            .handle(jobLaunchingGateway)\n            // TODO: Notify somebody?  No idea yet\n            .&lt;JobExecution&gt;handle(exec -&gt; System.out.println(\"GOT EXECUTION: \" + exec))\n            .get();\n}\n</code></pre>\n\n<p>Nothing in here is particularly special, no odd configs that I'm aware of.</p>\n\n<p>The job itself is pretty straight-forward, too:</p>\n\n<pre><code>/**\n * This is the definition of the entire batch process that runs polling.\n * @return\n */\n@Bean\nJob pollingJobJob() {\n    return jobBuilderFactory.get(\"pollingJobJob\")\n            .incrementer(new RunIdIncrementer())\n            // Ship it down to the slaves for actual processing\n            .start(remoteChunkingStep())\n            // Now mark it as complete\n            .next(markCompleteStep())\n            .build();\n}\n\n/**\n * Sends the job to a remote slave via an ActiveMQ-backed JMS queue.\n */\n@Bean\nTaskletStep remoteChunkingStep() {\n    return stepBuilderFactory.get(\"polling-job-step-remote-chunking\")\n            .&lt;Long, String&gt;chunk(20)\n            .reader(runningPollingJobItemReader)\n            .processor(toJsonProcessor())\n            .writer(chunkWriter)\n            .build();\n}\n\n/**\n * This step just marks the PollerJob as Complete.\n */\n@Bean\nStep markCompleteStep() {\n    return stepBuilderFactory.get(\"polling-job-step-mark-complete\")\n            // We want each PollerJob instance to be a separate job in batch, and the\n            // reader is using the id passed in via job params to grab the one we want,\n            // so we don't need a large chunk size.  One at a time is fine.\n            .&lt;Long, Long&gt;chunk(1)\n            .reader(runningPollingJobItemReader)\n            .processor(new PassThroughItemProcessor&lt;Long&gt;())\n            .writer(this.completeStatusWriter)\n            .build();\n}\n</code></pre>\n\n<p>Here's the chunk writer config:</p>\n\n<pre><code>/**\n * This is part of the bridge between the spring-batch and spring-integration.  Nothing special or weird is going\n * on, so see the RemoteChunkHandlerFactoryBean for a description.\n */\n@Bean\nRemoteChunkHandlerFactoryBean&lt;PollerJob&gt; remoteChunkHandlerFactoryBean() {\n    RemoteChunkHandlerFactoryBean&lt;PollerJob&gt; factory = new RemoteChunkHandlerFactoryBean&lt;&gt;();\n    factory.setChunkWriter(chunkWriter);\n    factory.setStep(remoteChunkingStep());\n    return factory;\n}\n\n/**\n * This is the writer that will actually send the chunk to the slaves.  Note that it also configures the\n * internal channel on which replies are expected.\n */\n@Bean\n@StepScope\nChunkMessageChannelItemWriter&lt;String&gt; chunkWriter() {\n    ChunkMessageChannelItemWriter&lt;String&gt; writer = new ChunkMessageChannelItemWriter&lt;&gt;();\n    writer.setMessagingOperations(batchMessagingTemplate());\n    writer.setReplyChannel(batchResponseChannel());\n    writer.setThrottleLimit(1000);\n    return writer;\n}\n</code></pre>\n\n<p>The problem seems to be that last section sets up the <code>ChunkMessageChannelItemWriter</code> such that the <code>replyChannel</code> is the same one used by all of the writers, despite each writer being step-scoped.  It would seem that I need to add a <code>replyChannel</code> header to one of the messages, but I'm not sure where in the chain to do that or how to process that (if I need to at all?).</p>\n\n<p>Also, this is being sent to the slaves via JMS/ActiveMQ and I'd like to avoid having just a stupid number of nearly-identical queues on ActiveMQ just to support this.</p>\n\n<p>What are my options?</p>\n",
  "link" : "https://stackoverflow.com/questions/44806067/spring-batch-integration-remote-chunking-error-message-contained-wrong-job-ins",
  "owner" : {
    "user_id" : 4147091,
    "user_type" : "registered",
    "display_name" : "Mike Snare",
    "profile_image" : "https://www.gravatar.com/avatar/71cac5adc663078d21aa1bba0f4adbc8?s=128&d=identicon&r=PG&f=1",
    "link" : "https://stackoverflow.com/users/4147091/mike-snare",
    "reputation" : 70,
    "accept_rate" : 40
  },
  "is_answered" : false,
  "creation_date" : 1498661803,
  "last_activity_date" : 1498661803,
  "tags" : [
    "java",
    "spring",
    "spring-integration",
    "spring-batch"
  ],
  "score" : 1,
  "view_count" : 4,
  "answer_count" : 0
}